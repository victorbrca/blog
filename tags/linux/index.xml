<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Victor&#39;s Blog</title>
    <link>https://victorbrca.github.io/blog/tags/linux/</link>
    <description>Recent content in Linux on Victor&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>(c) 2016 Copyright my blog</copyright>
    <lastBuildDate>Mon, 25 Dec 2017 11:09:12 -0500</lastBuildDate>
    
	<atom:link href="https://victorbrca.github.io/blog/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Custom Stand-up Desk Build</title>
      <link>https://victorbrca.github.io/blog/2017/12/25/custom-standup-desk-build/</link>
      <pubDate>Mon, 25 Dec 2017 11:09:12 -0500</pubDate>
      
      <guid>https://victorbrca.github.io/blog/2017/12/25/custom-standup-desk-build/</guid>
      <description>After commuting close to 1000kms a week for 6 years, I have decided to the the leap and move to Toronto. After all, I was here around 4 nights a week, and having to commute back and forward between Mississauga and Toronto had become a hassle. This would also increas my work drive (from 85kms each way to 115kms), but luckily my client agreed for me to work remote 4 days of the week, with made my move even more possible.</description>
    </item>
    
    <item>
      <title>How to Create a Quick Web Server</title>
      <link>https://victorbrca.github.io/blog/2017/10/11/how-to-create-a-quick-web-server/</link>
      <pubDate>Wed, 11 Oct 2017 17:58:37 -0400</pubDate>
      
      <guid>https://victorbrca.github.io/blog/2017/10/11/how-to-create-a-quick-web-server/</guid>
      <description>Have you ever had the need to create a web server to perform a test? Well, here are a few quick options on how to do this.
Got Netcat? If you have Netcat on the server (which is pretty easy to get), then you can do this.
Example 1: Display the date and the text &amp;laquo;It works&amp;raquo;
nc -kl 10001 -c &#39;echo -e &amp;quot;HTTPS/1.1 200 OK\r\n\r\n$(date)\r\n\r\nIt works&amp;quot;&#39;  Example 2: Display an index.</description>
    </item>
    
    <item>
      <title>How to Load Gitlab Inside an Iframe</title>
      <link>https://victorbrca.github.io/blog/2017/10/11/how-to-load-gitlab-inside-an-iframe/</link>
      <pubDate>Wed, 11 Oct 2017 17:08:34 -0400</pubDate>
      
      <guid>https://victorbrca.github.io/blog/2017/10/11/how-to-load-gitlab-inside-an-iframe/</guid>
      <description>So you are trying to load GitLab inside another page via iframe, and you are not able to. Due to security reasons, this is default behavior for GitLab, and as per the project (see issue 2347, this will not change, and I agree).
However for some internal users this might not be the best approach, so here&amp;rsquo;s how to enable it.
Browse to your install directory and go to your ‘nginx’ folder.</description>
    </item>
    
    <item>
      <title>How to View DNS Calls Made by Processes</title>
      <link>https://victorbrca.github.io/blog/2017/10/06/how-to-view-dns-calls-made-by-processes/</link>
      <pubDate>Fri, 06 Oct 2017 18:46:20 -0400</pubDate>
      
      <guid>https://victorbrca.github.io/blog/2017/10/06/how-to-view-dns-calls-made-by-processes/</guid>
      <description>We had the need at work to monitor DNS calls made by an application in a RHEL system in order to stabilish if a connection pool config change had taken full effect, or if we had missed any configuration file. And the solution was to use SystemTap for this task.
SystemTap (stap) is a scripting language and tool that simplifies the gathering of information about the running Linux system. It allows you to monitor and trace the operation of a Linux kernel.</description>
    </item>
    
    <item>
      <title>Bash Special Parameters</title>
      <link>https://victorbrca.github.io/blog/2017/09/26/bash-special-parameters/</link>
      <pubDate>Tue, 26 Sep 2017 22:46:27 -0400</pubDate>
      
      <guid>https://victorbrca.github.io/blog/2017/09/26/bash-special-parameters/</guid>
      <description>Special parameters are set by the shell to store information about aspects of its current state, such as the number of arguments and the exit code of the last command. Special parameters can only be referenced and cannot have it&amp;rsquo;s value assigned.
Special parameters are: $*, $@, $#, $$, $!, $?, $0, $-, $_
   Parameter Definition     $* List of arguments (as a string)   $@ List of arguments (as an array)   $# Number of positional parameters   $$ PID of the current shell   $!</description>
    </item>
    
    <item>
      <title>Gnome Touchpad Settings Missing in Arch Xps 13</title>
      <link>https://victorbrca.github.io/blog/2017/09/23/gnome-touchpad-settings-missing-in-arch-xps-13/</link>
      <pubDate>Sat, 23 Sep 2017 22:47:40 -0400</pubDate>
      
      <guid>https://victorbrca.github.io/blog/2017/09/23/gnome-touchpad-settings-missing-in-arch-xps-13/</guid>
      <description>I had an issue where the Gnome extension &amp;lsquo;Touchpad Indicator&amp;rsquo; stopped working on my xps 13 (Arch). After looking a bit further, it seems that the Gnome Touchpad settings had also stopped working. All I could see was the mouse settings, and the touchpad section was completelly gone.
Solution:
With Gnome 3.20, xf86-input-synaptics is not longer supported, and you should use xf86-input-libinput instead.
You can check what is installed on your Arch system with pacman -Q | grep input.</description>
    </item>
    
    <item>
      <title>Additional Status for Vim With Powerline</title>
      <link>https://victorbrca.github.io/blog/2017/09/20/additional-status-for-vim-with-powerline/</link>
      <pubDate>Wed, 20 Sep 2017 13:26:46 -0400</pubDate>
      
      <guid>https://victorbrca.github.io/blog/2017/09/20/additional-status-for-vim-with-powerline/</guid>
      <description>Would you like to have more information displayed while reading files in VIM? Powerline is a great utility for that.
In it&amp;rsquo;s default config, it displays:
 Current mode (normal, insert, visual) Git branch File name File encoding Script type File view percentage Line number  To install it Arch: sudo pacman -Ss python-powerline powerline  Add the line below to your ~/.vimrc
set laststatus=2  Note: If you get the error below</description>
    </item>
    
    <item>
      <title>Bash: Parameter Expansion (Substitution)</title>
      <link>https://victorbrca.github.io/blog/2017/09/19/bash-parameter-expansion/</link>
      <pubDate>Tue, 19 Sep 2017 01:31:32 -0400</pubDate>
      
      <guid>https://victorbrca.github.io/blog/2017/09/19/bash-parameter-expansion/</guid>
      <description>Default Usage ${PARAMETER}
Expand parameter value. It can be used for:
 Separating characters from variable names  cd /home/${user}  Positional parameter higher than 9  echo &amp;quot;Argument 10 is: ${10}&amp;quot;   Indirection ${!PARAMETER}
Expands to the value of the variable named by the value of parameter.
var=var1 var1=temp $ echo ${!var} temp  Case Modification ${PARAMETER^}, ${PARAMETER^^} ${PARAMETER,}, ${PARAMETER,,} ${PARAMETER~}, ${PARAMETER~~}
|Operator|Action| |&amp;ndash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;| |^|Changes first character to upper case| |^^|Changes all characters to upper case| |,|Changes first character to lower case| |,,|Changes all characters to lower case| |~|Inverts case of first character| |~~|Inverts case of all characters|</description>
    </item>
    
    <item>
      <title>Alternatives to Top</title>
      <link>https://victorbrca.github.io/blog/2017/08/30/alternatives-to-top/</link>
      <pubDate>Wed, 30 Aug 2017 01:34:30 -0400</pubDate>
      
      <guid>https://victorbrca.github.io/blog/2017/08/30/alternatives-to-top/</guid>
      <description>Looking for alternatives to your usual top command? Here are some options.
htop htop is based on ncurses and is compatible with most Linux (and Unix) systems. It&amp;rsquo;s also in most the official repos for most distros.
Features: - Mouse clicks (due to ncurses) - Defaults to multi-CPU view - Memory shown in GB
Website: http://hisham.hm/htop/
vtop vtop takes more of a graphical approach to top, while concentrating more on simplicity.</description>
    </item>
    
    <item>
      <title>Bash - Command Substitution, Subshell and Codeblock</title>
      <link>https://victorbrca.github.io/blog/2017/01/11/bash-command-substitution-subshell-and-codeblock/</link>
      <pubDate>Wed, 11 Jan 2017 01:38:41 -0400</pubDate>
      
      <guid>https://victorbrca.github.io/blog/2017/01/11/bash-command-substitution-subshell-and-codeblock/</guid>
      <description>Bash - Command Substitution, Subshell and Codeblock
Quick and simple differences between using $(..), (..) and {..;}.
 $(command) or `command` - Command substitution (the output of a command replaces the command name) and is executed in a subshell. Please give preference to $(..) for better readability ( command ) - Command list is executed in a subshell { command ;} - Command list is executed in the current shell  Executing code</description>
    </item>
    
    <item>
      <title>Redirecting Bash Xtrace to a Separate Log</title>
      <link>https://victorbrca.github.io/blog/2016/12/23/redirecting-bash-xtrace-to-a-separate-log/</link>
      <pubDate>Fri, 23 Dec 2016 14:58:09 -0400</pubDate>
      
      <guid>https://victorbrca.github.io/blog/2016/12/23/redirecting-bash-xtrace-to-a-separate-log/</guid>
      <description>So you have a Bash script that you want to troubleshoot, but you want to send stdout to a file, and stderr to another. Here&amp;rsquo;s a solution.
For example, I like to use Bash&amp;rsquo;s color to display failure or success on checks, and echo&amp;rsquo;s removal of new lines (echo -e &amp;quot;Wait for it...\c &amp;quot;) to wait for checks. For example, the screenshot below shows a script that check each step and report back.</description>
    </item>
    
    <item>
      <title>How to Record and Share a Terminal Session</title>
      <link>https://victorbrca.github.io/blog/2016/11/02/how-to-record-and-share-a-terminal-session/</link>
      <pubDate>Wed, 02 Nov 2016 17:52:10 -0400</pubDate>
      
      <guid>https://victorbrca.github.io/blog/2016/11/02/how-to-record-and-share-a-terminal-session/</guid>
      <description>A while ago I had shared instructions on &amp;laquo;How to Share a Terminal Window Online&amp;raquo;. This is great for live support.
Today I&amp;rsquo;m sharing instructions on how to record your teminal session, and not only share it, but also allow users to copy and paste text from the playback video.
The installation could not be easier. And to show how great this utility is, I&amp;rsquo;m showing the instructions using a &amp;laquo;video&amp;raquo; recorderd with &amp;laquo;showterm&amp;raquo;.</description>
    </item>
    
    <item>
      <title>How to Create a Prompt With Timeout in Bash</title>
      <link>https://victorbrca.github.io/blog/2016/10/19/how-to-create-a-prompt-with-timeout-in-bash/</link>
      <pubDate>Wed, 19 Oct 2016 17:56:37 -0400</pubDate>
      
      <guid>https://victorbrca.github.io/blog/2016/10/19/how-to-create-a-prompt-with-timeout-in-bash/</guid>
      <description>Here&amp;rsquo;s a quick function that will display a prompt with timeout in a bash script:
_myCountdownFunction () { echo -e &amp;quot;Hit \&amp;quot;Ctrl+c\&amp;quot; to quit or \&amp;quot;Enter\&amp;quot; to continue... \c&amp;quot; cnt=5 while (( cnt &amp;gt;= 0 )) ; do if (( cnt &amp;lt; 9 )) ; then echo -e &amp;quot;\b\b${cnt}s\c&amp;quot; elif (( cnt == 9 )) ; then echo -e &amp;quot;\b\b\b ${cnt}s\c&amp;quot; elif (( cnt &amp;lt;= 99 )) ; then echo -e &amp;quot;\b\b\b\b ${cnt}s\c&amp;quot; elif (( cnt &amp;lt; 999 )) ; then echo -e &amp;quot;\b\b\b\b${cnt}s\c&amp;quot; fi read -t 1 my_reply (( $?</description>
    </item>
    
    <item>
      <title>Bash Scripting - Best Practices</title>
      <link>https://victorbrca.github.io/blog/2015/12/18/bash-scripting---best-practices/</link>
      <pubDate>Fri, 18 Dec 2015 18:10:57 -0400</pubDate>
      
      <guid>https://victorbrca.github.io/blog/2015/12/18/bash-scripting---best-practices/</guid>
      <description>Bash Scripting - Best Practices 1 - Readability 1.1 - Indentation There are 3 commonly used indentation practices for Bash (I prefer the first method, however all 3 are &amp;laquo;accepted&amp;raquo;):
 2 spaces 4 spaces tabs (usually 8 spaces)
  All examples will be shown using the first indentation method, however for reference here&amp;rsquo;s a comparison between all 3.
Example:
## 2 spaces if ... command else ... command fi ## 4 spaces if .</description>
    </item>
    
  </channel>
</rss>