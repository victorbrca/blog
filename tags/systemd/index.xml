<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Systemd on Victor&#39;s Blog</title>
    <link>https://blog.victormendonca.com/tags/systemd/</link>
    <description>Recent content in Systemd on Victor&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>(c) 2018 Copyright Victor Mendon√ßa</copyright>
    <lastBuildDate>Sat, 14 Nov 2020 16:00:00 -0500</lastBuildDate>
    
	<atom:link href="https://blog.victormendonca.com/tags/systemd/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RHCSA8: Boot Targets, Systemd Targets and root Password Reset</title>
      <link>https://blog.victormendonca.com/2020/11/14/rhcsa8-boot-targets-system-targets-and-root-password-reset/</link>
      <pubDate>Sat, 14 Nov 2020 16:00:00 -0500</pubDate>
      
      <guid>https://blog.victormendonca.com/2020/11/14/rhcsa8-boot-targets-system-targets-and-root-password-reset/</guid>
      <description>For quite a while the RHCSA exam has covered topics related to boot targets and the famous root password reset. However, with the introduction of systemd and other related changes this can sometimes become a bit confusing. The methods that were once used for RHEL 6/7 may no longer be available or may not be the &amp;lsquo;official&amp;rsquo; way of doing things anymore.
I will try to clear some of the differences so we can have a better understanding of what&amp;rsquo;s needed for the RHCSAv8 exam.</description>
    </item>
    
    <item>
      <title>Creating a Simple Systemd User Service</title>
      <link>https://blog.victormendonca.com/2018/05/14/creating-a-simple-systemd-user-service/</link>
      <pubDate>Mon, 14 May 2018 12:53:43 -0400</pubDate>
      
      <guid>https://blog.victormendonca.com/2018/05/14/creating-a-simple-systemd-user-service/</guid>
      <description>Quick instructions on how to create a simple systemd user service for a program or script.
1- Identify the script or program/binary that you will be using
2- Create a systemd unit file using the example below, give it a name that will make sense to you with a .service extension (like [my_service].service), and save it to $USER/.config/systemd/user
[Unit] Description=[Service description] [Service] Type=simple StandardOutput=journal ExecStart=[script path] [Install] WantedBy=default.target  For this example we used a service type simple, which allows systemd to take care of the most basic needs for us.</description>
    </item>
    
  </channel>
</rss>